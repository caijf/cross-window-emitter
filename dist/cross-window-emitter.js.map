{"version":3,"file":"cross-window-emitter.js","sources":["webpack://crossWindowEmitter/webpack/universalModuleDefinition","webpack://crossWindowEmitter/webpack/bootstrap","webpack://crossWindowEmitter/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"crossWindowEmitter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"crossWindowEmitter\"] = factory();\n\telse\n\t\troot[\"crossWindowEmitter\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","// 事件触发器缓存最长保留时间，轮询时间不能超过该时间一半\nconst MAX_EMITTER_TIME = 30 * 60 * 1000;\n\n// 处理程序\nconst handlers = {\n  data: {},\n\n  // 添加处理程序\n  add(eventName, listener) {\n    if (!this.data[eventName]) {\n      this.data[eventName] = [];\n    }\n    this.data[eventName].push({\n      timestamp: Date.now(), // 注册或触发时间，如果该时间大于触发时间则不触发。\n      fn: listener\n    })\n  },\n\n  // 删除处理程序\n  remove(eventName, listener) {\n    if (!this.data[eventName]) {\n      this.data[eventName] = [];\n    }\n\n    if (listener) {\n      this.data[eventName] = this.data[eventName].filter(item => item.fn !== listener);\n    } else {\n      this.data[eventName] = [];\n    }\n  },\n\n  // 获取处理程序\n  get(eventName) {\n    return eventName ? this.data[eventName] : this.data;\n  },\n\n  // 是否还有处理程序\n  has(eventName) {\n    const eventList = this.get(eventName) || [];\n    return eventList.length > 0;\n  }\n};\n\n// 触发器缓存\nconst emitterStorage = {\n  // 缓存key\n  key: \"__private_cross_window_emitter__\",\n\n  // 获取缓存\n  get(eventName) {\n    const tmpData = JSON.parse(window.localStorage.getItem(this.key)) || {};\n    return eventName ? tmpData[eventName] : tmpData;\n  },\n\n  // 设置缓存\n  set(data) {\n    window.localStorage.setItem(this.key, JSON.stringify(data));\n  },\n\n  // 添加数据\n  add(eventName, ...args) {\n    const tmpData = this.get();\n\n    tmpData[eventName] = {\n      timestamp: Date.now(), // 触发时间\n      params: args || []\n    }\n\n    const keys = Object.keys(tmpData);\n\n    keys.forEach(key => {\n      if (Date.now() - tmpData[key] > MAX_EMITTER_TIME) {\n        delete tmpData[key]\n      }\n    });\n\n    this.set(tmpData);\n  },\n\n  // 删除数据\n  remove(eventName) {\n    const tmpData = this.get();\n\n    if (eventName) {\n      delete tmpData[eventName];\n      this.set(tmpData);\n    } else {\n      window.localStorage.removeItem(this.key);\n    }\n  }\n}\n\n// 运行\nconst run = (eventName, cb = () => { }) => {\n  return () => {\n    const curEmitter = emitterStorage.get(eventName);\n    const curHandlers = handlers.get(eventName);\n\n    if (curEmitter) {\n      curHandlers.forEach(({ timestamp, fn }, index) => {\n        if (timestamp < curEmitter.timestamp) {\n          cb();\n          curHandlers[index].timestamp = Date.now(); // 更新执行时间\n          fn.call(null, ...curEmitter.params);\n        }\n      })\n    }\n  }\n}\n\n// 轮询管理\nconst polling = {\n  data: {},\n\n  // 开始轮询\n  start(eventName, fn, pollingInterval = 500) {\n    if (!eventName) {\n      return;\n    }\n\n    if (!this.data[eventName]) {\n      this.data[eventName] = {\n        timestamp: Date.now(), // 开始轮询时间\n        pollingInterval,\n        timer: null\n      }\n    }\n\n    const curPolling = this.data[eventName];\n    curPolling.pollingInterval = pollingInterval;\n    clearInterval(curPolling.timer);\n    curPolling.timer = setInterval(fn, pollingInterval);\n  },\n\n  // 停止轮询\n  stop(eventName) {\n    if (!eventName || !this.data[eventName]) {\n      return;\n    }\n    clearInterval(this.data[eventName].timer);\n  },\n\n  // 设置轮询时间\n  setPollingInterval(eventName, pollingInterval = 500) {\n    if (!eventName || !this.data[eventName] || !pollingInterval) {\n      return;\n    }\n\n    if (pollingInterval > MAX_EMITTER_TIME / 2) {\n      console.warn(`polling interval no more than ${MAX_EMITTER_TIME}.`);\n      pollingInterval = MAX_EMITTER_TIME / 2;\n    }\n\n    const curPolling = this.data[eventName];\n\n    clearInterval(curPolling.timer);\n    this.start(eventName, run(eventName), pollingInterval);\n  }\n}\n\n// 注册事件\nconst on = (eventName, listener) => {\n  handlers.add(eventName, listener);\n  polling.start(eventName, run(eventName));\n}\n\n// 注册一次事件，执行后移除该监听方法\nconst once = (eventName, listener) => {\n  let isRun = false; // 标识是否运行过函数\n  handlers.add(eventName, listener);\n  polling.start(eventName, () => {\n    if (isRun) {\n      handlers.remove(eventName, listener); // 移除该监听方法\n\n      if (!handlers.has(eventName)) {\n        polling.stop(eventName); // 如果没有处理程序，停止轮询\n      }\n    }\n\n    run(eventName, () => {\n      isRun = true;\n    })();\n  });\n}\n\n// 解绑事件\nconst off = (eventName, listener) => {\n  handlers.remove(eventName, listener);\n\n  if (!handlers.has(eventName)) {\n    polling.stop(eventName);\n  }\n}\n\n// 触发事件\nconst emit = (eventName, ...args) => {\n  emitterStorage.add(eventName, ...args);\n}\n\n// // 销毁，全部取消轮询\n// const destroy = () => {\n//   const eventNames = Object.keys(handlers.get());\n//   eventNames.forEach(eventName => polling.stop(eventName));\n//   handlers.remove();\n// }\n\n// 设置轮询间隔时间\nconst setPollingInterval = (eventName, pollingInterval) => {\n  polling.setPollingInterval(eventName, pollingInterval);\n}\n\nexport {\n  on,\n  once,\n  off,\n  emit,\n  setPollingInterval\n}\n\nexport default {\n  on,\n  once,\n  off,\n  emit,\n  setPollingInterval\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApCA;AACA;AAuCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AACA;AAgDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA9CA;AACA;AAiDA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AADA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;A","sourceRoot":""}