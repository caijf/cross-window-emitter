{"version":3,"file":"cross-window-emitter.min.js","sources":["../node_modules/.pnpm/@rollup+plugin-typescript@12.1.4_rollup@4.46.1_tslib@2.8.1_typescript@5.8.3/node_modules/tslib/tslib.es6.js","../node_modules/.pnpm/emitter-pro@1.2.2/node_modules/emitter-pro/dist/emitter-pro.esm.js","../node_modules/.pnpm/cache2@3.1.2/node_modules/cache2/dist/cache2.esm.js","../src/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","/**\n * 事件触发器，支持浏览器端和 node 端。\n *\n * @class\n * @example\n *\n * const emitter = new Emitter();\n *\n * // 注册监听方法\n * emitter.on('foo', () => console.log('foo 1'));\n * emitter.on('foo', () => console.log('foo 2'));\n *\n * // 触发方法\n * emitter.emit('foo');\n * // foo 1\n * // foo 2\n *\n * // 取消监听方法\n * emitter.off('foo');\n *\n * // 支持链式调用\n * emitter.on('foo', () => {})\n *  .on('foo', () => {})\n *  .off('foo');\n */\nvar EmitterPro = /** @class */ (function () {\n    function EmitterPro() {\n        this.handlers = {};\n    }\n    /**\n     * 获取全部事件名称。\n     *\n     * @returns 事件名称数组。\n     * @example\n     * emitter.on('foo', () => {});\n     * emitter.on('bar', () => {});\n     *\n     * emitter.eventNames(); // ['foo', 'bar']\n     */\n    EmitterPro.prototype.eventNames = function () {\n        var _a;\n        var symbols = ((_a = Object.getOwnPropertySymbols) === null || _a === void 0 ? void 0 : _a.call(Object, this.handlers)) || [];\n        var keys = Object.keys(this.handlers);\n        return keys.concat(symbols);\n    };\n    /**\n     * 获取事件名称的全部监听方法（原始方法，未经过包装处理）。\n     *\n     * @param eventName 事件名称\n     * @returns 对应事件名称的监听方法数组\n     * @example\n     * const fn1 = () => console.log('bar');\n     * const fn2 = () => console.log('baz');\n     *\n     * emitter.on('test', fn1);\n     * emitter.once('test', fn2);\n     *\n     * emitter.rawListeners('test'); // [fn1, fn2]\n     */\n    EmitterPro.prototype.rawListeners = function (eventName) {\n        var handler = this.handlers[eventName];\n        return handler ? handler.map(function (item) { return item.raw; }) : [];\n    };\n    /**\n     * 获取事件名称的全部监听方法（如通过 `once` 方法注册，返回的是包装方法）。\n     *\n     * @param eventName 事件名称\n     * @returns 对应事件名称的监听方法数组\n     * @example\n     * const fn1 = () => console.log('bar');\n     * const fn2 = () => console.log('baz');\n     *\n     * emitter.on('test', fn1);\n     * emitter.once('test', fn2);\n     *\n     * emitter.rawListeners('test'); // [fn1, wrapFn2]\n     */\n    EmitterPro.prototype.listeners = function (eventName) {\n        var handler = this.handlers[eventName];\n        return handler ? handler.map(function (item) { return item.wrap; }) : [];\n    };\n    /**\n     * 判断事件名称对应的监听方法是否存在。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @returns 如果事件名称存在该事件方法返回 `true`，否则返回 `false`。\n     * @example\n     * const fn1 = () => console.log('bar');\n     * const fn2 = () => console.log('baz');\n     *\n     * emitter.on('test', fn1);\n     * emitter.once('test', fn2);\n     *\n     * emitter.hasListener('test', fn1); // true\n     * emitter.hasListener('test', fn2); // true\n     *\n     * // fn2 是通过 once 方法注册，执行一次后自动解绑\n     * emitter.emit('test');\n     *\n     * emitter.hasListener('test', fn1); // true\n     * emitter.hasListener('test', fn2); // false\n     */\n    EmitterPro.prototype.hasListener = function (eventName, listener) {\n        return this.rawListeners(eventName).some(function (item) { return item === listener; });\n    };\n    EmitterPro.prototype._on = function (eventName, raw, wrap, context, dir) {\n        if (context === void 0) { context = null; }\n        if (dir === void 0) { dir = 1; }\n        var currentListener = { raw: raw, wrap: wrap, context: context };\n        if (!this.handlers[eventName]) {\n            this.handlers[eventName] = [currentListener];\n        }\n        else {\n            var appendMethod = dir === 1 ? 'push' : 'unshift';\n            this.handlers[eventName][appendMethod](currentListener);\n        }\n        return this;\n    };\n    /**\n     * 注册监听方法。同 `on` 方法，只是将监听方法添加到最前面（事件触发是按顺序执行）。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.prependListener('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // 42\n     * // bar\n     */\n    EmitterPro.prototype.prependListener = function (eventName, listener, context) {\n        return this._on(eventName, listener, listener, context, 0);\n    };\n    /**\n     * 注册监听方法。允许多次添加同一引用的函数。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.on('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     */\n    EmitterPro.prototype.on = function (eventName, listener, context) {\n        return this._on(eventName, listener, listener, context);\n    };\n    EmitterPro.prototype._wrapOnce = function (eventName, listener, context) {\n        var _this = this;\n        if (context === void 0) { context = null; }\n        var wrap = (function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            listener.apply(context, args);\n            _this.off(eventName, wrap);\n        });\n        return wrap;\n    };\n    /**\n     * 仅触发一次的监听方法。使用方法同 `on` 。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.once('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     *\n     * emitter.emit('foo');\n     * // bar\n     */\n    EmitterPro.prototype.once = function (eventName, listener, context) {\n        var wrap = this._wrapOnce(eventName, listener, context);\n        return this._on(eventName, listener, wrap, context);\n    };\n    /**\n     * 仅触发一次的监听方法。同 `once` 方法，只是添加到最前面（事件触发是按顺序执行）。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @param context 执行上下文\n     * @returns 事件触发器实例。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.prependOnceListener('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // 42\n     * // bar\n     *\n     * emitter.emit('foo');\n     * // bar\n     */\n    EmitterPro.prototype.prependOnceListener = function (eventName, listener, context) {\n        var wrap = this._wrapOnce(eventName, listener, context);\n        return this._on(eventName, listener, wrap, context, 0);\n    };\n    /**\n     * 取消监听方法。如果不传第二个参数，将取消该事件名称的全部监听方法。如果多次添加同一引用的函数，需要多次删除。\n     *\n     * @param eventName 事件名称\n     * @param listener 监听方法\n     * @returns 事件触发器实例。\n     * @example\n     * const fn = () => console.log('bar');\n     * emitter.on('foo', fn);\n     * emitter.on('foo', () => console.log('baz'));\n     * emitter.on('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // baz\n     * // 42\n     *\n     * emitter.off('foo', fn); // 取消 foo 的监听方法 fn\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     *\n     * emitter.off('foo'); // 取消 foo 的全部监听方法\n     * emitter.emit('foo'); // 什么都没发生\n     */\n    EmitterPro.prototype.off = function (eventName, listener) {\n        var handler = this.handlers[eventName];\n        if (handler) {\n            if (listener) {\n                var index = handler.findIndex(function (item) { return item.wrap === listener || item.raw === listener; });\n                if (index !== -1) {\n                    handler.splice(index, 1);\n                }\n            }\n            else {\n                delete this.handlers[eventName];\n            }\n        }\n        return this;\n    };\n    /**\n     * 取消全部事件名称的监听方法。\n     *\n     * @returns 事件触发器实例。\n     * @example\n     * const fn = () => console.log('bar');\n     * emitter.on('test', fn);\n     * emitter.on('test', () => console.log('baz'));\n     * emitter.on('test', () => console.log(42));\n     *\n     * emitter.on('other', fn);\n     * emitter.on('other', () => console.log('baz'));\n     *\n     * emitter.emit('test');\n     * // bar\n     * // baz\n     * // 42\n     *\n     * emitter.emit('other');\n     * // bar\n     * // baz\n     *\n     * emitter.offAll(); // 取消全部监听方法\n     *\n     * emitter.emit('test'); // 什么都没发生\n     * emitter.emit('other'); // 什么都没发生\n     */\n    EmitterPro.prototype.offAll = function () {\n        this.handlers = {};\n        return this;\n    };\n    /**\n     * 触发监听方法。\n     *\n     * @param eventName 事件名称\n     * @param args 触发监听方法的参数（从第二个参数开始都将传给监听方法）\n     * @returns 如果触发成功返回 `true`，否则返回 `false`。\n     * @example\n     * emitter.on('foo', () => console.log('bar'));\n     * emitter.on('foo', () => console.log(42));\n     *\n     * emitter.emit('foo');\n     * // bar\n     * // 42\n     *\n     * // 支持传入参数\n     * emitter.on('test' (a, b) => console.log(a + b));\n     * emitter.on('test' (a, b) => console.log(a * b));\n     *\n     * emitter.emit('other', 2, 5);\n     * // 7\n     * // 10\n     *\n     * emitter.emit('other', 5, 5);\n     * // 10\n     * // 25\n     */\n    EmitterPro.prototype.emit = function (eventName) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var handler = this.handlers[eventName];\n        if (handler && handler.length > 0) {\n            handler.forEach(function (listener) {\n                listener.wrap.apply(listener.context, args);\n            });\n            return true;\n        }\n        return false;\n    };\n    return EmitterPro;\n}());\n\nexport { EmitterPro as default };\n","import { __assign, __extends } from 'tslib';\nimport Emitter from 'emitter-pro';\n\nvar cache = {};\nvar MemoryStorage = /** @class */ (function () {\n    function MemoryStorage(scope) {\n        if (scope === void 0) { scope = 'default'; }\n        this.scope = scope;\n        if (!cache[this.scope]) {\n            cache[this.scope] = {};\n        }\n        this.data = cache[this.scope];\n    }\n    MemoryStorage.prototype.getItem = function (key) {\n        return key in this.data ? this.data[key] : null;\n    };\n    MemoryStorage.prototype.setItem = function (key, value) {\n        this.data[key] = value;\n    };\n    MemoryStorage.prototype.removeItem = function (key) {\n        delete this.data[key];\n    };\n    MemoryStorage.prototype.clear = function () {\n        cache[this.scope] = {};\n        this.data = cache[this.scope];\n    };\n    return MemoryStorage;\n}());\n\n// 随机字符串\nfunction randomString() {\n    return Math.random().toString(16).substring(2, 8);\n}\n// 是否支持 storage\nfunction isStorageSupported(storage) {\n    try {\n        var isSupport = typeof storage === 'object' &&\n            storage !== null &&\n            !!storage.setItem &&\n            !!storage.getItem &&\n            !!storage.removeItem;\n        if (isSupport) {\n            var key = randomString() + new Date().getTime();\n            var value = '1';\n            storage.setItem(key, value);\n            if (storage.getItem(key) !== value) {\n                return false;\n            }\n            storage.removeItem(key);\n        }\n        return isSupport;\n    }\n    catch (e) {\n        console.error(\"[cache2] \".concat(storage, \" is not supported. The default memory cache will be used.\"));\n        return false;\n    }\n}\nfunction parse(value, reviver) {\n    try {\n        return JSON.parse(value, reviver);\n    }\n    catch (e) {\n        return value;\n    }\n}\nfunction stringify(value, replacer) {\n    return JSON.stringify(value, replacer);\n}\n\n/**\n * 数据存储管理。\n *\n * @class\n * @param {Object} [storage] 自定义缓存对象要包含 `getItem` `setItem` `removeItem` 方法。默认使用内存缓存。\n * @param {Object} [options] 配置项。可选。\n * @param {boolean} [options.needParsed] 存取数据时是否需要序列化和解析数据。如果使用内置的内存缓存，默认 `false`，如果自定义 `storage` 默认 `true`。\n * @param {Function} [options.replacer] 数据存储时序列化的参数，透传给 [JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) 的 `replacer` 参数。仅在 `needParsed=true` 时生效。\n * @param {Function} [options.reviver] 数据获取时转换的参数，透传给 [JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) 的 `reviver` 参数。仅在 `needParsed=true` 时生效。\n * @param {string} [options.prefix] 缓存键前缀。便于管理同域名下的不同项目缓存。\n * @example\n * // 使用内存缓存\n * const memory = new Storage();\n * memory.set('foo', { baz: 42 });\n * memory.get('foo');\n * // { baz: 42 }\n *\n * // 自定义缓存 sessionStorage 。\n * const session = new Storage(window.sessionStorage);\n * session.set('foo', { a: 1, b: ['bar'], c: ['x', 2, 3] });\n * session.get('foo');\n * // { a: 1, b: ['bar'], c: ['x', 2, 3] }\n *\n * session.del('foo'); // 删除缓存\n * session.get('foo');\n * // null\n *\n * // 使用缓存键前缀。\n * // 如果要使用内存缓存， storage 传 `undefined`。\n * const local = new Storage(window.localStorage, { prefix: 'project_name' });\n * local.set('foo', { baz: 42 });\n * local.get('foo');\n * // { baz: 42 }\n */\nvar Storage = /** @class */ (function () {\n    function Storage(storage, options) {\n        if (options === void 0) { options = {}; }\n        var isSupported = storage ? isStorageSupported(storage) : false;\n        this.options = __assign({ needParsed: isSupported, prefix: '' }, options);\n        this.storage = isSupported ? storage : new MemoryStorage(this.options.memoryScope);\n    }\n    /**\n     * 内部用于获取存储的键名称。\n     *\n     * 如果实例有设置 `prefix`，返回 `prefix + key`。\n     *\n     * @protected\n     * @param key 原键名称\n     * @returns 存储的键名称\n     */\n    Storage.prototype.getKey = function (key) {\n        return this.options.prefix + key;\n    };\n    /**\n     * 获取存储的数据。\n     *\n     * @param {string} key 键名称。\n     * @returns 如果键值存在返回键值，否则返回 `null`。\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     */\n    Storage.prototype.get = function (key) {\n        var value = this.storage.getItem(this.getKey(key));\n        return this.options.needParsed ? parse(value, this.options.reviver) : value;\n    };\n    /**\n     * 存储数据。\n     *\n     * @param key 键名称。\n     * @param value 键值。\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     */\n    Storage.prototype.set = function (key, value) {\n        this.storage.setItem(this.getKey(key), this.options.needParsed ? stringify(value, this.options.replacer) : value);\n    };\n    /**\n     * 删除存储的数据。\n     *\n     * @param key 键名称。\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     *\n     * local.del('foo');\n     * local.get('foo');\n     * // null\n     */\n    Storage.prototype.del = function (key) {\n        this.storage.removeItem(this.getKey(key));\n    };\n    /**\n     * 清除存储的所有键。\n     *\n     * 注意：该方法调用 `storage.clear()`，可能会将同域下的不同实例的所有键都清除。如果要避免这种情况，建议使用 `import { Cache } 'cache2'`。\n     *\n     * @example\n     * const local = new Storage(window.localStorage);\n     * local.set('foo', { baz: 42 });\n     * local.get('foo');\n     * // { baz: 42 }\n     *\n     * local.clear();\n     * local.get('foo');\n     * // null\n     */\n    Storage.prototype.clear = function () {\n        if (typeof this.storage.clear === 'function') {\n            this.storage.clear();\n        }\n    };\n    return Storage;\n}());\n\n// 命名空间缓存键前缀。\nvar defaultPrefix = 'cache2_';\nvar defaultNamespace = 'default';\n/**\n * 功能丰富的数据存储管理，支持 `自定义缓存` `命名空间` `数据过期时间` `限制缓存数量` `自定义事件`。\n *\n * 注意：如果你需要的是简单的基本数据存储管理，例如浏览器存储，建议使用 `import { Storage } from 'cache2'`。\n *\n * @class\n * @param {string} [namespace] 命名空间。可选。\n * @param {Object} [options] 配置项。可选。\n * @param {Object} [options.storage] 自定义缓存对象要包含 `getItem` `setItem` `removeItem` 方法。默认使用内置的内存缓存。\n * @param {number} [options.max=-1] 最大缓存数据数量。`-1` 表示无限制。默认 `-1`。\n * @param {'limited' | 'replaced'} [options.maxStrategy='limited'] 当达到最大缓存数量限制时的缓存策略。`limited` 表示达到限制数量后不存入数据，保存时返回 `false`。`replaced` 表示优先替换快过期的数据，如果都是一样的过期时间(0)，按照先入先出规则处理，保存时始终返回 `true`。默认 `limited`。\n * @param {number} [options.stdTTL=0] 相对当前时间的数据存活时间，应用于当前实例的所有缓存数据。单位为毫秒，`0` 表示无期限。默认 `0`。\n * @param {number} [options.checkperiod=0] 定时检查过期数据，单位毫秒。如果小于等于 `0` 表示不启动定时器检查。默认 `0`。\n * @param {boolean} [options.needParsed] 存取数据时是否需要序列化和解析数据。如果使用内置的内存缓存，默认 `false`，如果自定义 `storage` 默认 `true`。\n * @param {Function} [options.replacer] 数据存储时序列化的参数，透传给 [JSON.stringify](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) 的 `replacer` 参数。仅在 `needParsed=true` 时生效。\n * @param {Function} [options.reviver] 数据获取时转换的参数，透传给 [JSON.parse](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) 的 `reviver` 参数。仅在 `needParsed=true` 时生效。\n * @param {string} [options.prefix] 缓存键前缀。\n * @example\n * // 自定义过期时间\n * const memoryCache = new Cache({ stdTTL: 60 * 1000 });\n * memoryCache.set('foo', { baz: 42 });\n * memoryCache.get('foo');\n * // { baz: 42 }\n *\n * // 60 seconds later\n *\n * memoryCache.get('foo');\n * // undefined\n *\n * // 命名空间、自定义缓存\n * const localCache = new Cache('namespace', { storage: window.localStorage });\n * localCache.set('foo', { baz: 42 });\n * localCache.get('foo');\n * // { baz: 42 }\n *\n * localCache.del('foo');\n * localCache.get('foo');\n * // undefined\n */\nvar Cache = /** @class */ (function (_super) {\n    __extends(Cache, _super);\n    function Cache(namespace, options) {\n        var _this = _super.call(this) || this;\n        var ns = defaultNamespace, opts;\n        if (typeof namespace === 'string') {\n            ns = namespace || defaultNamespace;\n        }\n        else if (typeof namespace === 'object') {\n            opts = namespace;\n        }\n        if (!opts && typeof options === 'object') {\n            opts = options;\n        }\n        _this.options = __assign({ max: -1, stdTTL: 0, maxStrategy: 'limited', checkperiod: 0, prefix: defaultPrefix }, opts);\n        _this.storage = new Storage(_this.options.storage, __assign({ memoryScope: ns }, _this.options));\n        _this.cacheKey = ns;\n        _this.startCheckperiod();\n        return _this;\n    }\n    /**\n     * 检查当前键值是否过期，如果过期将会自动删除。\n     *\n     * @param key 键名称。\n     * @param data 缓存数据。\n     * @returns 如果键值已过期返回 `false` ，否则返回 `true`。\n     */\n    Cache.prototype._check = function (key, data) {\n        var ret = true;\n        if (data.t !== 0 && data.t < Date.now()) {\n            ret = false;\n            this.del(key);\n            this.emit('expired', key, data.v);\n        }\n        return ret;\n    };\n    Cache.prototype._wrap = function (value, ttl) {\n        var now = Date.now();\n        var currentTtl = typeof ttl === 'number' ? ttl : this.options.stdTTL;\n        var livetime = currentTtl > 0 ? now + currentTtl : 0;\n        return {\n            v: value,\n            t: livetime,\n            n: now\n        };\n    };\n    Cache.prototype._isLimited = function (len) {\n        return this.options.max > -1 && len >= this.options.max;\n    };\n    Cache.prototype._getReplaceKey = function (keys, cacheValues) {\n        var retkey = keys[0];\n        keys.forEach(function (key) {\n            if (cacheValues[key].t < cacheValues[retkey].t ||\n                (cacheValues[key].t === cacheValues[retkey].t && cacheValues[key].n < cacheValues[retkey].n)) {\n                retkey = key;\n            }\n        });\n        return retkey;\n    };\n    Object.defineProperty(Cache.prototype, \"cacheValues\", {\n        /**\n         * 获取全部缓存数据，不处理过期数据和排序\n         */\n        get: function () {\n            return this.storage.get(this.cacheKey) || {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // 设置缓存数据\n    Cache.prototype.setCacheValues = function (values) {\n        this.storage.set(this.cacheKey, values);\n    };\n    /**\n     * 获取缓存值。\n     *\n     * @param {string} key 键名称。\n     * @returns {*} 如果找到该值，则返回该值。如果未找到或已过期，则返回 `undefined`。\n     * @example\n     * myCache.set('myKey', obj, 5 * 60 * 1000);\n     * myCache.get('myKey');\n     * // { foo: 'bar', baz: 42 }\n     *\n     * myCache.get('myKey2');\n     * // undefined\n     */\n    Cache.prototype.get = function (key) {\n        var data = this.cacheValues[key];\n        if (data && this._check(key, data)) {\n            return data.v;\n        }\n        return;\n    };\n    /**\n     * 获取多个缓存值。\n     *\n     * @param {string[]} keys 多个键名称。\n     * @returns {Object} 如果找到对应键名的值，返回一个具有键值对的对象。如果未找到或已过期，则返回一个空对象 `{}`。\n     * @example\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     *\n     * myCache.mget(['myKey', 'myKey2']);\n     * // {\n     * //   myKey: { foo: 'bar', baz: 42 },\n     * //   myKey2: { a: 1, b: 2 }\n     * // }\n     */\n    Cache.prototype.mget = function (keys) {\n        var _this = this;\n        var ret = {};\n        if (!Array.isArray(keys)) {\n            return ret;\n        }\n        var cacheValues = this.cacheValues;\n        keys.forEach(function (key) {\n            var data = cacheValues[key];\n            if (data && _this._check(key, data)) {\n                ret[key] = data.v;\n            }\n        });\n        return ret;\n    };\n    /**\n     * 获取全部缓存值。\n     *\n     * @returns {Object} 返回一个具有键值对的对象。\n     * @example\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     *\n     * myCache.getAll();\n     * // {\n     * //   myKey: { foo: 'bar', baz: 42 },\n     * //   myKey2: { a: 1, b: 2 }\n     * //   myKey3: 'abc'\n     * // }\n     */\n    Cache.prototype.getAll = function () {\n        var keys = Object.keys(this.cacheValues);\n        return this.mget(keys);\n    };\n    /**\n     * 设置缓存数据。\n     *\n     * 如果超出缓存数量，可能会设置失败。\n     *\n     * @param {string} key 键名称。\n     * @param {*} value 键值。\n     * @param {number} [ttl] 数据存活时间。单位毫秒 `ms`。\n     * @returns {boolean} 如果设置成功返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.set('myKey', { foo: 'bar', baz: 42 }, 5 * 60 * 1000);\n     * // true\n     */\n    Cache.prototype.set = function (key, value, ttl) {\n        if (this.options.max === 0) {\n            return false;\n        }\n        var cacheValues = this.cacheValues;\n        var keys = Object.keys(cacheValues);\n        // 当前不存在该键值，并且数据量超过最大限制\n        if (!cacheValues[key] && this._isLimited(keys.length)) {\n            var validKeys = this.keys();\n            if (this._isLimited(validKeys.length)) {\n                // 如果最大限制策略是替换，将优先替换快过期的数据，如果都是一样的过期时间(0)，按照先入先出规则处理。\n                if (this.options.maxStrategy === 'replaced') {\n                    var replaceKey = this._getReplaceKey(validKeys, cacheValues);\n                    this.del(replaceKey);\n                }\n                else {\n                    // 如果是最大限制策略是不允许添加，返回 false 。\n                    return false;\n                }\n            }\n        }\n        cacheValues[key] = this._wrap(value, ttl);\n        this.setCacheValues(cacheValues);\n        this.emit('set', key, cacheValues[key].v);\n        return true;\n    };\n    /**\n     * 设置多个缓存数据。\n     *\n     * @param {Object[]} keyValueSet 多个键值对数据。\n     * @returns {boolean} 如果全部设置成功返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     * // true\n     */\n    Cache.prototype.mset = function (keyValueSet) {\n        var _this = this;\n        // 该处不使用数组 some 方法，是因为不能某个失败，而导致其他就不在更新。\n        var ret = true;\n        keyValueSet.forEach(function (item) {\n            var itemSetResult = _this.set(item.key, item.value, item.ttl);\n            if (ret && !itemSetResult) {\n                ret = false;\n            }\n        });\n        return ret;\n    };\n    /**\n     * 删除一个或多个键。\n     *\n     * @param {string|string[]} key 要删除的键名。\n     * @returns {number} 返回已删除的数量。\n     * @example\n     * myCache.set('myKey', { foo: 'bar', baz: 42 });\n     * myCache.del('myKey'); // 1\n     * myCache.del('not found'); // 0\n     *\n     * myCache.mset([\n     *   { key: 'myKey', value: { foo: 'bar', baz: 42 }, ttl: 5 * 60 * 1000 },\n     *   { key: 'myKey2', value: { a: 1, b: 2 } },\n     *   { key: 'myKey3', value: 'abc' }\n     * ]);\n     * myCache.del(['myKey', 'myKey2']); // 2\n     */\n    Cache.prototype.del = function (key) {\n        var _this = this;\n        var cacheValues = this.cacheValues;\n        var count = 0;\n        var keys = Array.isArray(key) ? key : [key];\n        keys.forEach(function (key) {\n            if (cacheValues[key]) {\n                count++;\n                var oldData = cacheValues[key];\n                delete cacheValues[key];\n                _this.emit('del', key, oldData.v);\n            }\n        });\n        if (count > 0) {\n            this.setCacheValues(cacheValues);\n        }\n        return count;\n    };\n    /**\n     * 清除全部缓存的数据。\n     *\n     * @example\n     * myCache.set('bar', 1);\n     * myCache.set('foo', 2);\n     * myCache.keys(); // ['bar', 'foo']\n     *\n     * myCache.clear();\n     * myCache.keys(); // []\n     */\n    Cache.prototype.clear = function () {\n        this.storage.del(this.cacheKey);\n    };\n    /**\n     * 获取全部键名的数组。\n     *\n     * @returns {string[]} 返回全部键名的数组。\n     * @example\n     * myCache.set('bar', 1);\n     * myCache.set('foo', 2);\n     *\n     * myCache.keys(); // ['bar', 'foo']\n     */\n    Cache.prototype.keys = function () {\n        var _this = this;\n        var cacheValues = this.cacheValues;\n        var keys = Object.keys(cacheValues);\n        return keys.filter(function (key) { return _this._check(key, cacheValues[key]); });\n    };\n    /**\n     * 判断是否存在某个键。\n     *\n     * @param {string} key 键名称。\n     * @returns {boolean} 如果包含该键返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.has('foo'); // false\n     *\n     * myCache.set('foo', 1);\n     * myCache.has('foo'); // true\n     */\n    Cache.prototype.has = function (key) {\n        var data = this.cacheValues[key];\n        return !!(data && this._check(key, data));\n    };\n    /**\n     * 获取缓存值并从缓存中删除键。\n     *\n     * @param {string} key 键名称。\n     * @returns {*} 如果找到该值，则返回该值，并从缓存中删除该键。如果未找到或已过期，则返回 `undefined`。\n     * @example\n     * myCache.set('myKey', 'myValue');\n     * myCache.has('myKey'); // true\n     *\n     * myCache.take('myKey'); // 'myValue'\n     * myCache.has('myKey'); // false\n     */\n    Cache.prototype.take = function (key) {\n        var ret;\n        var data = this.cacheValues[key];\n        if (data && this._check(key, data)) {\n            ret = data.v;\n            this.del(key);\n        }\n        return ret;\n    };\n    /**\n     * 更新缓存键值的数据存活时间。\n     *\n     * @param {string} key 键名称。\n     * @param {number} ttl 数据存活时间。\n     * @returns {boolean} 如果找到并更新成功，则返回 `true`，否则返回 `false`。\n     * @example\n     * myCache.set('myKey', { foo: 'bar', baz: 42 }, 5 * 60 * 1000);\n     * myCache.ttl('myKey', 60 * 1000);\n     * // true\n     *\n     * myCache.ttl('not found', 1000);\n     * // false\n     */\n    Cache.prototype.ttl = function (key, ttl) {\n        var cacheValues = this.cacheValues;\n        var data = cacheValues[key];\n        if (data && this._check(key, data)) {\n            cacheValues[key] = this._wrap(data.v, ttl);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * 获取某个键的过期时间戳。\n     *\n     * @param {string} key 键名称。\n     * @returns {number | undefined} 如果未找到键或已过期，返回 `undefined`。如果 `ttl` 为 `0`，返回 `0`，否则返回一个以毫秒为单位的时间戳，表示键值将过期的时间。\n     * @example\n     * const myCache = new Cache({ stdTTL: 5 * 1000 });\n     *\n     * // 假如 Date.now() = 1673330000000\n     * myCache.set('ttlKey', 'expireData');\n     * myCache.set('noTtlKey', 'nonExpireData', 0);\n     *\n     * myCache.getTtl('ttlKey'); // 1673330005000\n     * myCache.getTtl('noTtlKey'); // 0\n     * myCache.getTtl('unknownKey'); // undefined\n     */\n    Cache.prototype.getTtl = function (key) {\n        var cacheValues = this.cacheValues;\n        var data = cacheValues[key];\n        if (data && this._check(key, data)) {\n            return cacheValues[key].t;\n        }\n        return;\n    };\n    /**\n     * 获取某个键值的最后修改时间。\n     *\n     * @param {string} key 键名称。\n     * @returns {number | undefined} 如果未找到键或已过期，返回 `undefined`，否则返回一个以毫秒时间戳，表示键值最后修改时间。\n     * @example\n     * const myCache = new Cache();\n     *\n     * // 假如 Date.now() = 1673330000000\n     * myCache.set('myKey', 'foo');\n     * myCache.getLastModified('myKey'); // 1673330000000\n     *\n     * // 5000ms later\n     * myCache.set('myKey', 'bar');\n     * myCache.getLastModified('myKey'); // 1673330005000\n     */\n    Cache.prototype.getLastModified = function (key) {\n        var cacheValues = this.cacheValues;\n        var data = cacheValues[key];\n        if (data && this._check(key, data)) {\n            return cacheValues[key].n;\n        }\n        return;\n    };\n    /**\n     * 启动定时校验过期数据。\n     *\n     * 注意，如果没有设置 `checkperiod` 将不会触发定时器。\n     *\n     * @example\n     * // 设置 checkperiod 之后自动生效\n     * const myCache = new Cache({\n     *   checkperiod: 10 * 60 * 1000 // 10分钟检查一次数据是否过期\n     * });\n     *\n     * // 停止定时校验过期数据\n     * myCache.stopCheckperiod();\n     *\n     * // 启动定时校验过期数据\n     * myCache.startCheckperiod();\n     */\n    Cache.prototype.startCheckperiod = function () {\n        var _this = this;\n        // 触发全部缓存数据是否过期校验\n        this.keys();\n        if (this.options.checkperiod > 0) {\n            clearTimeout(this._checkTimeout);\n            this._checkTimeout = setTimeout(function () {\n                _this.startCheckperiod();\n            }, this.options.checkperiod);\n        }\n    };\n    /**\n     * 停止定时校验过期数据。\n     *\n     * @example\n     * // 设置 checkperiod 之后自动生效\n     * const myCache = new Cache({\n     *   checkperiod: 10 * 60 * 1000 // 10分钟检查一次数据是否过期\n     * });\n     *\n     * // 停止定时校验过期数据\n     * myCache.stopCheckperiod();\n     */\n    Cache.prototype.stopCheckperiod = function () {\n        clearTimeout(this._checkTimeout);\n    };\n    return Cache;\n}(Emitter));\n\nexport { Cache, Storage, Cache as default };\n","import { Cache } from 'cache2';\n\ntype Listener = (...args: any[]) => any;\n\n// 事件触发器缓存最长保留时间，轮询时间不能超过该时间一半\nconst MAX_EMITTER_TIME = 30 * 60 * 1000;\n\n// 处理程序\nconst handlers = {\n  data: {} as Record<string, { fn: Listener; timestamp: number }[]>,\n\n  // 添加处理程序\n  add(eventName: string, listener: Listener) {\n    if (!this.data[eventName]) {\n      this.data[eventName] = [];\n    }\n    this.data[eventName].push({\n      timestamp: Date.now(), // 注册或触发时间，如果该时间大于触发时间则不触发。\n      fn: listener\n    });\n  },\n\n  // 删除处理程序\n  remove(eventName: string, listener?: Listener) {\n    if (this.data[eventName] && listener) {\n      this.data[eventName] = this.data[eventName].filter((item) => item.fn !== listener);\n    } else {\n      this.data[eventName] = [];\n    }\n  },\n\n  // 获取处理程序\n  get(eventName: string) {\n    return this.data[eventName] || [];\n  },\n\n  // 是否还有处理程序\n  has(eventName: string) {\n    const eventList = this.get(eventName);\n    return eventList.length > 0;\n  }\n};\n\n// 触发器缓存\nconst emitterStorage = new Cache<{ timestamp: number; params: any[] }>(\n  '__private_cross_window_emitter__',\n  {\n    stdTTL: MAX_EMITTER_TIME,\n    storage: window.localStorage\n  }\n);\n\n// 运行\nconst run = (eventName: string, cb?: () => void) => {\n  return () => {\n    const curEmitter = emitterStorage.get(eventName);\n    const curHandlers = handlers.get(eventName);\n\n    if (curEmitter) {\n      curHandlers.forEach(({ timestamp, fn }, index) => {\n        if (timestamp < curEmitter.timestamp) {\n          cb?.();\n          curHandlers[index].timestamp = Date.now(); // 更新执行时间\n          fn.apply(null, curEmitter.params);\n        }\n      });\n    }\n  };\n};\n\n// 轮询管理\nconst polling = {\n  data: {} as Record<string, { timestamp: number; pollingInterval: number; timer: any }>,\n\n  // 开始轮询\n  start(eventName: string, fn: () => void, pollingInterval = 500) {\n    if (!eventName) {\n      return;\n    }\n\n    if (!this.data[eventName]) {\n      this.data[eventName] = {\n        timestamp: Date.now(), // 开始轮询时间\n        pollingInterval,\n        timer: null\n      };\n    }\n\n    const curPolling = this.data[eventName];\n    curPolling.pollingInterval = pollingInterval;\n    clearInterval(curPolling.timer);\n    curPolling.timer = setInterval(fn, pollingInterval);\n  },\n\n  // 停止轮询\n  stop(eventName: string) {\n    if (!eventName || !this.data[eventName]) {\n      return;\n    }\n    clearInterval(this.data[eventName].timer);\n  },\n\n  // 设置轮询时间\n  setPollingInterval(eventName: string, pollingInterval = 500) {\n    if (!eventName || !this.data[eventName] || !pollingInterval) {\n      return;\n    }\n\n    if (pollingInterval > MAX_EMITTER_TIME / 2) {\n      console.warn(`polling interval no more than ${MAX_EMITTER_TIME}.`);\n      pollingInterval = MAX_EMITTER_TIME / 2;\n    }\n\n    const curPolling = this.data[eventName];\n\n    clearInterval(curPolling.timer);\n    this.start(eventName, run(eventName), pollingInterval);\n  }\n};\n\n/**\n * 注册事件\n *\n * @param {string} eventName 事件名称\n * @param {function} listener 回调函数\n */\nconst on = (eventName: string, listener: Listener) => {\n  handlers.add(eventName, listener);\n  polling.start(eventName, run(eventName));\n};\n\n/**\n * 注册一次事件，执行后移除该监听方法\n *\n * @param {string} eventName 事件名称\n * @param {function} listener 回调函数\n */\nconst once = (eventName: string, listener: Listener) => {\n  let isRun = false; // 标识是否运行过函数\n  handlers.add(eventName, listener);\n  polling.start(eventName, () => {\n    if (isRun) {\n      handlers.remove(eventName, listener); // 移除该监听方法\n\n      if (!handlers.has(eventName)) {\n        polling.stop(eventName); // 如果没有处理程序，停止轮询\n      }\n    }\n\n    run(eventName, () => {\n      isRun = true;\n    })();\n  });\n};\n\n/**\n * 解绑事件，如不传第二参数，将移除全部 eventName 的事件\n *\n * @param {string} eventName 事件名称\n * @param {function} [listener] 回调函数\n */\nconst off = (eventName: string, listener?: Listener) => {\n  handlers.remove(eventName, listener);\n\n  if (!handlers.has(eventName)) {\n    polling.stop(eventName);\n  }\n};\n\n/**\n * 触发事件\n *\n * @param {string} eventName 事件名称\n * @param {any[]} ...args 剩余参数用于传参\n */\nconst emit = (eventName: string, ...args: any[]) => {\n  emitterStorage.set(eventName, {\n    timestamp: Date.now(), // 触发时间\n    params: args || []\n  });\n};\n\n// // 销毁，全部取消轮询\n// const destroy = () => {\n//   const eventNames = Object.keys(handlers.data);\n//   eventNames.forEach(eventName => polling.stop(eventName));\n//   handlers.remove();\n// }\n\n/**\n * 设置轮询时间\n *\n * @param {string} eventName 事件名称\n * @param {number} pollingInterval 轮询时间，单位毫秒\n */\nconst setPollingInterval = (eventName: string, pollingInterval: number) => {\n  polling.setPollingInterval(eventName, pollingInterval);\n};\n\nexport { on, once, off, emit, setPollingInterval };\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__assign","assign","t","s","i","n","arguments","length","apply","this","SuppressedError","EmitterPro","handlers","eventNames","_a","symbols","getOwnPropertySymbols","keys","concat","rawListeners","eventName","handler","map","item","raw","listeners","wrap","hasListener","listener","some","_on","context","dir","currentListener","appendMethod","prependListener","on","_wrapOnce","_this","args","_i","off","once","prependOnceListener","index","findIndex","splice","offAll","emit","forEach","cache","MemoryStorage","scope","data","getItem","key","setItem","value","removeItem","clear","isStorageSupported","storage","isSupport","Math","random","toString","substring","Date","getTime","e","console","error","Storage","options","isSupported","needParsed","prefix","memoryScope","getKey","get","reviver","JSON","parse","set","replacer","stringify","del","defaultNamespace","Cache","_super","namespace","opts","ns","max","stdTTL","maxStrategy","checkperiod","cacheKey","startCheckperiod","TypeError","String","__","constructor","create","__extends","_check","ret","now","v","_wrap","ttl","currentTtl","_isLimited","len","_getReplaceKey","cacheValues","retkey","defineProperty","enumerable","configurable","setCacheValues","values","mget","isArray","getAll","validKeys","replaceKey","mset","keyValueSet","itemSetResult","count","oldData","filter","has","take","getTtl","getLastModified","clearTimeout","_checkTimeout","setTimeout","stopCheckperiod","Emitter","MAX_EMITTER_TIME","add","push","timestamp","fn","remove","emitterStorage","window","localStorage","run","cb","curEmitter","curHandlers","params","polling","start","pollingInterval","timer","curPolling","clearInterval","setInterval","stop","setPollingInterval","warn","isRun"],"mappings":"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","x_google_ignoreList":[0,1,2]}